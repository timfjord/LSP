{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting started # To get up and running quickly: Find a server for the language of your choice in the list of language servers and follow its setup instructions. Open a document in your chosen language - if the server starts successfully then its name will be shown on the left in the status bar. If you are having issues with starting the server, check the Troubleshooting section. About This Package # The package \"LSP\" is an acronym for L anguage S erver P rotocol. This is a specification for the communication protocol for use between text editors or IDEs and language servers - tools which provide language-specific features like autocomplete, go to definition, or documentation on hover. This package acts as an interface between Sublime Text and your language server, which means that to obtain these features you need to install a server for your language first. Language servers can be provided as standalone executables or might require a runtime environment like Node.js or Python. Many new concepts not native to Sublime Text are in use. For an overview of these concepts, please see the Features page.","title":"Getting Started"},{"location":"#getting-started","text":"To get up and running quickly: Find a server for the language of your choice in the list of language servers and follow its setup instructions. Open a document in your chosen language - if the server starts successfully then its name will be shown on the left in the status bar. If you are having issues with starting the server, check the Troubleshooting section.","title":"Getting started"},{"location":"#about-this-package","text":"The package \"LSP\" is an acronym for L anguage S erver P rotocol. This is a specification for the communication protocol for use between text editors or IDEs and language servers - tools which provide language-specific features like autocomplete, go to definition, or documentation on hover. This package acts as an interface between Sublime Text and your language server, which means that to obtain these features you need to install a server for your language first. Language servers can be provided as standalone executables or might require a runtime environment like Node.js or Python. Many new concepts not native to Sublime Text are in use. For an overview of these concepts, please see the Features page.","title":"About This Package"},{"location":"commands/","text":"Commands # Commands and shortcuts # Apart from the commands listed in the Keyboard Shortcuts section, LSP also provides more generic commands in the Command Palette: LSP: Restart Server : restarts running language server belonging to the active window This command only works when in a document with a running server. Preferences: LSP Settings : opens LSP settings Preferences: LSP Key Bindings : opens LSP key bindings configuration - see Keyboard Shortcuts LSP: Enable / Disable Language Server Globally : enables or disables chosen server globally (you can disable a server globally and enable it only per project, for example) LSP: Enable / Disable Language Server in Project : enables or disables chosen server for the current project (the project must be saved on disk first using Project -> Save Project As... ) LSP: Troubleshoot Server : allows to troubleshoot chosen server to help diagnose issues Preferences: LSP Language ID Mapping Overrides : opens settings that define how to map the file's syntax scope to language server languageId identifier (advanced) Execute server commands # For LSP servers that can handle workspace/executeCommand , you can make these commands available in Sublime's Command Palette by adding an entry to your existing *.sublime-commands file or by creating a new one. Example: [ // ... { \"caption\" : \"Thread First\" , \"command\" : \"lsp_execute\" , \"args\" : { \"session_name\" : \"LSP-pyright\" , \"command_name\" : \"thread-first\" , \"command_args\" : [ \"${file_uri}\" , 0 , 0 ] } } ] Notes: the session_name is required and needs to match the server's key within the clients configuration object. the command_args is optional depending on the workspace/executeCommand that are supported by the LSP server. You can include special variables in the command_args array that will be automatically expanded. Supported variables include Sublime's built-in ones (see the full list in the Build Systems documentation) as well as additional variables listed below. Note that the built-in variables will be expanded regardless of where they are in the array and also within nested arrays or objects while the variables listed below will only be expanded in the top-level array values and only if those values match exactly (will not match if they are sub-strings of values): Variable Type Description \"$document_id\" or \"${document_id}\" object JSON object { 'uri': string } containing the file URI of the active view, see Document Identifier \"$file_uri\" or \"${file_uri}\" string File URI of the active view \"$selection\" or \"${selection}\" string Content of the (topmost) selection \"$offset\" or \"${offset}\" int Character offset of the (topmost) cursor position \"$selection_begin\" or \"${selection_begin}\" int Character offset of the begin of the (topmost) selection \"$selection_end\" or \"${selection_end}\" int Character offset of the end of the (topmost) selection \"$position\" or \"${position}\" object JSON object { 'line': int, 'character': int } of the (topmost) cursor position, see Position \"$range\" or \"${range}\" object JSON object with 'start' and 'end' positions of the (topmost) selection, see Range","title":"Commands"},{"location":"commands/#commands","text":"","title":"Commands"},{"location":"commands/#commands-and-shortcuts","text":"Apart from the commands listed in the Keyboard Shortcuts section, LSP also provides more generic commands in the Command Palette: LSP: Restart Server : restarts running language server belonging to the active window This command only works when in a document with a running server. Preferences: LSP Settings : opens LSP settings Preferences: LSP Key Bindings : opens LSP key bindings configuration - see Keyboard Shortcuts LSP: Enable / Disable Language Server Globally : enables or disables chosen server globally (you can disable a server globally and enable it only per project, for example) LSP: Enable / Disable Language Server in Project : enables or disables chosen server for the current project (the project must be saved on disk first using Project -> Save Project As... ) LSP: Troubleshoot Server : allows to troubleshoot chosen server to help diagnose issues Preferences: LSP Language ID Mapping Overrides : opens settings that define how to map the file's syntax scope to language server languageId identifier (advanced)","title":"Commands and shortcuts"},{"location":"commands/#execute-server-commands","text":"For LSP servers that can handle workspace/executeCommand , you can make these commands available in Sublime's Command Palette by adding an entry to your existing *.sublime-commands file or by creating a new one. Example: [ // ... { \"caption\" : \"Thread First\" , \"command\" : \"lsp_execute\" , \"args\" : { \"session_name\" : \"LSP-pyright\" , \"command_name\" : \"thread-first\" , \"command_args\" : [ \"${file_uri}\" , 0 , 0 ] } } ] Notes: the session_name is required and needs to match the server's key within the clients configuration object. the command_args is optional depending on the workspace/executeCommand that are supported by the LSP server. You can include special variables in the command_args array that will be automatically expanded. Supported variables include Sublime's built-in ones (see the full list in the Build Systems documentation) as well as additional variables listed below. Note that the built-in variables will be expanded regardless of where they are in the array and also within nested arrays or objects while the variables listed below will only be expanded in the top-level array values and only if those values match exactly (will not match if they are sub-strings of values): Variable Type Description \"$document_id\" or \"${document_id}\" object JSON object { 'uri': string } containing the file URI of the active view, see Document Identifier \"$file_uri\" or \"${file_uri}\" string File URI of the active view \"$selection\" or \"${selection}\" string Content of the (topmost) selection \"$offset\" or \"${offset}\" int Character offset of the (topmost) cursor position \"$selection_begin\" or \"${selection_begin}\" int Character offset of the begin of the (topmost) selection \"$selection_end\" or \"${selection_end}\" int Character offset of the end of the (topmost) selection \"$position\" or \"${position}\" object JSON object { 'line': int, 'character': int } of the (topmost) cursor position, see Position \"$range\" or \"${range}\" object JSON object with 'start' and 'end' positions of the (topmost) selection, see Range","title":"Execute server commands"},{"location":"customization/","text":"Hover popups # LSP uses mdpopups to display the popup. You can override its style by creating a Packages/User/mdpopups.css file. In particular, to get the same font in the popup as your \"font_face\" setting in Packages/User/Preferences.sublime-settings , add html { --mdpopups-font-mono : \"your desired font face\" ; } to Packages/User/mdpopups.css . See the mdpopups documentation for more details. Keyboard shortcuts (key bindings) # LSP's key bindings can be edited from the Preferences: LSP Key Bindings command in the Command Palette. Many of the default key bindings (visible in the left view) are disabled to avoid conflicts with default or user key bindings. To enable those, copy them to your user key bindings on the right, un-comment, and pick the key shortcut of your choice. If you want to create a new key binding that is different from the ones that are already included, you might want to make it active only when there is a language server with a specific LSP capability (refer to the ServerCapabilities structure in that link) running. In that case, you can make use of the lsp.session_with_capability context. For example, the following key binding overrides ctrl+r to use LSP's symbol provider but only when the current view has a language server with the documentSymbolProvider capability and we're in a javascript or a typescript file: { \"command\" : \"lsp_document_symbols\" , \"keys\" : [ \"ctrl+r\" ], \"context\" : [ { \"key\" : \"lsp.session_with_capability\" , \"operator\" : \"equal\" , \"operand\" : \"documentSymbolProvider\" }, { \"key\" : \"selector\" , \"operator\" : \"equal\" , \"operand\" : \"source.ts, source.js\" } ] }, Generally, you should not need to restrict your key bindings to specific scopes and just rely on checking the capability context. Mouse map configuration # If you want to bind some action to a mouse, open Preferences / Browser Packages from the main menu and create a sublime-mousemap file in the following location within the Packages folder: Platform Path Windows /User/Default (Windows).sublime-mousemap Linux /User/Default (Linux).sublime-mousemap Mac /User/Default (OSX).sublime-mousemap Here is an example mouse binding that triggers LSP's \"go to symbol definition\" command on pressing the ctrl + left click : [ { \"button\" : \"button1\" , \"count\" : 1 , \"modifiers\" : [ \"ctrl\" ], \"press_command\" : \"drag_select\" , \"command\" : \"lsp_symbol_definition\" , } ] Color scheme customizations # Some features use TextMate scopes to control the colors (underline, background or text color) of styled regions in a document or popup. Colors can be customized by adding a rule for these scopes into your color scheme. There is an example in the official ST documentation which explains how to do that. The following tables give an overview about the scope names used by LSP. Document Highlights # This feature is only available if the server has the documentHighlightProvider capability. Highlights other occurrences of the symbol at a given cursor position. scope DocumentHighlightKind description markup.highlight.text.lsp Text A textual occurrence markup.highlight.read.lsp Read Read-access of a symbol, like reading a variable markup.highlight.write.lsp Write Write-access of a symbol, like writing to a variable Note If document_highlight_style is set to \"fill\" in the LSP settings, the highlighting color can be controlled via the \"background\" color from a color scheme rule for the listed scopes. Diagnostics # scope DiagnosticSeverity description drawn as markup.error.lsp Error Reports an error Squiggly underlines markup.warning.lsp Warning Reports a warning Squiggly underlines markup.info.lsp Information Reports an information Stippled underlines markup.info.hint.lsp Hint Reports a hint Stippled underlines When the region of the diagnostic spans more than one line, the diagnostic is always drawn as a box. Diagnostics will also optionally include the following scopes: scope diagnostic tag name description markup.unnecessary.lsp Unnecessary Unused or unnecessary code markup.deprecated.lsp Deprecated Deprecated or obsolete code Those scopes can be used to, for example, gray-out the text color of unused code, if the server supports that. For example, to add a custom rule for Mariana color scheme, select UI: Customize Color Scheme from the Command Palette and add the following rule: { \"rules\" : [ { \"scope\" : \"markup.unnecessary.lsp\" , \"foreground\" : \"color(rgb(255, 255, 255) alpha(0.4))\" , \"background\" : \"color(var(blue3) alpha(0.9))\" } ] } The color scheme rule only works if the \"background\" color is different from the global background of the scheme. So for other color schemes, ideally pick a background color that is as close as possible, but marginally different from the original background. Signature Help # scope description entity.name.function.sighelp.lsp Function name in the signature help popup variable.parameter.sighelp.lsp Function argument in the signature help popup Annotations # scope description markup.accent.codelens.lsp Accent color for code lens annotations markup.accent.codeaction.lsp Accent color for code action annotations","title":"Customization"},{"location":"customization/#hover-popups","text":"LSP uses mdpopups to display the popup. You can override its style by creating a Packages/User/mdpopups.css file. In particular, to get the same font in the popup as your \"font_face\" setting in Packages/User/Preferences.sublime-settings , add html { --mdpopups-font-mono : \"your desired font face\" ; } to Packages/User/mdpopups.css . See the mdpopups documentation for more details.","title":"Hover popups"},{"location":"customization/#keyboard-shortcuts-key-bindings","text":"LSP's key bindings can be edited from the Preferences: LSP Key Bindings command in the Command Palette. Many of the default key bindings (visible in the left view) are disabled to avoid conflicts with default or user key bindings. To enable those, copy them to your user key bindings on the right, un-comment, and pick the key shortcut of your choice. If you want to create a new key binding that is different from the ones that are already included, you might want to make it active only when there is a language server with a specific LSP capability (refer to the ServerCapabilities structure in that link) running. In that case, you can make use of the lsp.session_with_capability context. For example, the following key binding overrides ctrl+r to use LSP's symbol provider but only when the current view has a language server with the documentSymbolProvider capability and we're in a javascript or a typescript file: { \"command\" : \"lsp_document_symbols\" , \"keys\" : [ \"ctrl+r\" ], \"context\" : [ { \"key\" : \"lsp.session_with_capability\" , \"operator\" : \"equal\" , \"operand\" : \"documentSymbolProvider\" }, { \"key\" : \"selector\" , \"operator\" : \"equal\" , \"operand\" : \"source.ts, source.js\" } ] }, Generally, you should not need to restrict your key bindings to specific scopes and just rely on checking the capability context.","title":"Keyboard shortcuts (key bindings)"},{"location":"customization/#mouse-map-configuration","text":"If you want to bind some action to a mouse, open Preferences / Browser Packages from the main menu and create a sublime-mousemap file in the following location within the Packages folder: Platform Path Windows /User/Default (Windows).sublime-mousemap Linux /User/Default (Linux).sublime-mousemap Mac /User/Default (OSX).sublime-mousemap Here is an example mouse binding that triggers LSP's \"go to symbol definition\" command on pressing the ctrl + left click : [ { \"button\" : \"button1\" , \"count\" : 1 , \"modifiers\" : [ \"ctrl\" ], \"press_command\" : \"drag_select\" , \"command\" : \"lsp_symbol_definition\" , } ]","title":"Mouse map configuration"},{"location":"customization/#color-scheme-customizations","text":"Some features use TextMate scopes to control the colors (underline, background or text color) of styled regions in a document or popup. Colors can be customized by adding a rule for these scopes into your color scheme. There is an example in the official ST documentation which explains how to do that. The following tables give an overview about the scope names used by LSP.","title":"Color scheme customizations"},{"location":"customization/#document-highlights","text":"This feature is only available if the server has the documentHighlightProvider capability. Highlights other occurrences of the symbol at a given cursor position. scope DocumentHighlightKind description markup.highlight.text.lsp Text A textual occurrence markup.highlight.read.lsp Read Read-access of a symbol, like reading a variable markup.highlight.write.lsp Write Write-access of a symbol, like writing to a variable Note If document_highlight_style is set to \"fill\" in the LSP settings, the highlighting color can be controlled via the \"background\" color from a color scheme rule for the listed scopes.","title":"Document Highlights"},{"location":"customization/#diagnostics","text":"scope DiagnosticSeverity description drawn as markup.error.lsp Error Reports an error Squiggly underlines markup.warning.lsp Warning Reports a warning Squiggly underlines markup.info.lsp Information Reports an information Stippled underlines markup.info.hint.lsp Hint Reports a hint Stippled underlines When the region of the diagnostic spans more than one line, the diagnostic is always drawn as a box. Diagnostics will also optionally include the following scopes: scope diagnostic tag name description markup.unnecessary.lsp Unnecessary Unused or unnecessary code markup.deprecated.lsp Deprecated Deprecated or obsolete code Those scopes can be used to, for example, gray-out the text color of unused code, if the server supports that. For example, to add a custom rule for Mariana color scheme, select UI: Customize Color Scheme from the Command Palette and add the following rule: { \"rules\" : [ { \"scope\" : \"markup.unnecessary.lsp\" , \"foreground\" : \"color(rgb(255, 255, 255) alpha(0.4))\" , \"background\" : \"color(var(blue3) alpha(0.9))\" } ] } The color scheme rule only works if the \"background\" color is different from the global background of the scheme. So for other color schemes, ideally pick a background color that is as close as possible, but marginally different from the original background.","title":"Diagnostics"},{"location":"customization/#signature-help","text":"scope description entity.name.function.sighelp.lsp Function name in the signature help popup variable.parameter.sighelp.lsp Function argument in the signature help popup","title":"Signature Help"},{"location":"customization/#annotations","text":"scope description markup.accent.codelens.lsp Accent color for code lens annotations markup.accent.codeaction.lsp Accent color for code action annotations","title":"Annotations"},{"location":"features/","text":"Features # This package enhances existing concepts from Sublime Text and introduces new concepts not native to Sublime Text. This page provides an overview of the most important capabilities. The capabilities/concepts are accessible in different ways. Some are accessible via the Context Menu by right-clicking with your mouse, or via the top Menu Bar. Others are part of an existing workflow. Almost all capabilities can also be bound to a key with a key binding. Auto Complete # Example GIF 1 Example GIF 2 The auto-complete functionality of Sublime Text is well-known to any user. It provides word completions from the current buffer, and, since ST4, completions from other files. It presents the auto-complete widget in a synchronous fashion. The LSP package enhances the auto-complete list with results provided by the language server. To show the documentation popup you can click the More link in the bottom of the autocomplete, or you can use the default sublime keybinding F12 to trigger it. Goto Definition # Example GIF 1 Example GIF 2 Sublime Text provides a \"Goto Definition\" feature by indexing the files in your project, and building a database out of the parsed files. The feature is accessible by clicking on Goto > Goto Definition. Sublime will attempt to jump to the definition of the word enclosing the caret. The files are parsed according to the .sublime-syntax associated to them. Entities which are assigned the entity.name.* scope are considered to be a \"definition\". Because a single .sublime-syntax file has no knowledge of the project structure, there may be multiple such \"definitions\". This package provides a replacement for Sublime's Goto Definition if your language server has this capability. The feature is accessible by right-clicking with your mouse on the word (or any character) and clicking on LSP > Goto Definition. Similarly, an entry in the Goto menu in the top Menu Bar is also available. In addition to the basic \"Goto Definition\", the protocol also provides further refinements of \"goto\" functionality: Goto Type Definition Goto Declaration Goto Implementation Find References # Example GIF 1 Example GIF 2 By parsing and indexing a project with .sublime-syntax files, Sublime Text is able to provide an approximation of where a type or function is used. This package provides a replacement of that functionality if your language server has this capability. Highlights # Example GIF 1 Sublime Text subtly highlights words that equal the one under your caret. This package does that as well, if your language server has that capability. It is enhanced in the sense that a language server can also annotate a region as being written to , to being read from . This is what stock Sublime Text cannot determine. Goto Symbol # Example GIF 1 Example GIF 2 Goto Symbol can be accessed by clicking on Goto > Goto Symbol. A common key binding for this is ctrl R . Sublime Text will show a Quick Panel where you can select a symbol from the current buffer. This package provides a replacement if your language server has this capability. Each symbol's type is accurately described, and the start and end positions of each symbol are clearly visible. Goto Symbol In Project # Example GIF 1 Goto Symbol In Project is a great feature of Sublime Text. It is like Goto Symbol, except you can search for a symbol through your entire project. It is a two-step UX process where you first select an identifier, and you are then presented with the possible locations of your selected identifier. This package provides a replacement if your language server has this capability. The \"LSP\" Goto Symbol In Project works slightly different because it is a one-step process instead of a two-step process. You select the appropriate symbol immediately. Expand Selection # Example GIF 1 Expand Selection can be accessed by clicking on Selection > Expand Selection. A common key binding for this is ctrl shift A . A language server may also have this capability and is in a better position to decide what a \"smart\" Expand Selection should do. Hover # Example GIF 1 \"Hover\" is a general term for an informational popup that appears when you bring your mouse to a word in the file. Sublime Text shows the definition(s) and references of the word that is under your caret. The LSP package replaces this built-in hover popup with your language server's hover info, if it has the capability. For instance, it may display type information, documentation, and example usage. Diagnostics # Example GIF 1 Diagnostics is a general term for \"things that are of interest in the file\". It may be syntax errors, warnings from your compiler, or hints about unused variables in a function. It is incorrect to call this \"lint results\", because diagnostics encompass more than just lint results. It is also incorrect to call these \"problems\", as hints are not really problems. Sublime Text has no concept of diagnostics (nor lint results or problems), and hence does not provide an API endpoint to push diagnostics to the end-user. This package invented its own diagnostics presentation system. The SublimeLinter package provides similar functionality. Formatting # Example GIF 1 Formatting is the art of computing a minimal set of white space text replacements. Formatting may be applied manually through a command invocation, or automatically when saving the file. Sublime Text has no concept of Formatting. Signature Help # Example GIF 1 Signature Help is similar to Auto Complete, but focuses on presenting the different overloads of a function invocation. This package provides Signature Help by means of showing a popup. If multiple overloads exist, you can browse through them just like Auto Complete. Sublime Text has no concept of Signature Help. Rename # Example GIF 1 When you want to rename an identifier in Sublime Text, you probably use ctrl D to select a few next occurences and do the rename with multiple cursors. Because a language server (usually) has an abstract syntax tree view of the file, it may be able to rename an identifier semantically. This package exposes that functionality through the hover popup, the context menu, and the top menu bar. Some language servers provide global rename functionality as well. This package will present a modal dialog to ask you to confirm to apply the changes if they span more than one file. Code Actions # Example GIF 1 Example GIF 2 Code Actions are an umbrella term for \"Quick Fixes\" and \"Refactorings\". They are actions that change the file (or more than one file) to resolve a diagnostic or apply a standard refactor technique. For instance, extracting a block of code into a separate method is usually called \"Extract Method\" and is a \"Refactoring\". Whereas \"add a missing semicolon\" would resolve a diagnostic that warns about a missing semicolon. Formatting is different from Code Actions, because Formatting is supposed to not mutate the abstract syntax tree of the file, only move around white space. Any Code Action will mutate the abstract syntax tree. This package presents Code Actions as a bluish clickable annotation positioned to the right of the viewport. Alternatively, they can be presented as a light bulb in the Gutter Area. Sublime Text has no concept of Code Actions. Code Lenses # Code Lenses are \"actionable contextual information interspersed\" in your source code. Actionable: You can click on the link and something happens. Contextual: The links are close to the code they are representing. Interspersed: The links are located throughout your source code. This package presents Code Lenses as a greenish clickable annotation positioned to the right of the viewport. Alternatively, they can be presented as phantoms. Sublime Text has no concept of Code Lenses. Server Commands # In Sublime Text you can bind any runnable command to a key or add it to various UI elements. Commands in Sublime Text are normally supplied by plugins or packages written in Python. A language server may provide a runnable command as well. These kinds of commands are wrapped in an lsp_execute Sublime command that you can bind to a key. Server Settings # Regular Sublime Text packages provide settings to adjust their behavior either via a .sublime-settings file that you can override in Packages/User/package-name.sublime-settings . A package may also allow customization through the Packages/User/Preferences.sublime-settings file and/or syntax-specific or project-specific settings. A language server may itself also expose settings that you can use to customize its behavior. For instance certain linter settings. This package allows customizing language server settings. Server Initialization Options # Initialization Options are like Server Settings , except they are static in the sense that they cannot be changed once the language server subprocess has started. Subprocesses # A language server usually runs as a long-lived subprocess of Sublime Text. Once you start Sublime Text and open a view, the syntax of that view is matched against any possible client configurations registered. If a client configuration matches, a subprocess is started that will then serve you language smartness.","title":"Features"},{"location":"features/#features","text":"This package enhances existing concepts from Sublime Text and introduces new concepts not native to Sublime Text. This page provides an overview of the most important capabilities. The capabilities/concepts are accessible in different ways. Some are accessible via the Context Menu by right-clicking with your mouse, or via the top Menu Bar. Others are part of an existing workflow. Almost all capabilities can also be bound to a key with a key binding.","title":"Features"},{"location":"features/#auto-complete","text":"Example GIF 1 Example GIF 2 The auto-complete functionality of Sublime Text is well-known to any user. It provides word completions from the current buffer, and, since ST4, completions from other files. It presents the auto-complete widget in a synchronous fashion. The LSP package enhances the auto-complete list with results provided by the language server. To show the documentation popup you can click the More link in the bottom of the autocomplete, or you can use the default sublime keybinding F12 to trigger it.","title":"Auto Complete"},{"location":"features/#goto-definition","text":"Example GIF 1 Example GIF 2 Sublime Text provides a \"Goto Definition\" feature by indexing the files in your project, and building a database out of the parsed files. The feature is accessible by clicking on Goto > Goto Definition. Sublime will attempt to jump to the definition of the word enclosing the caret. The files are parsed according to the .sublime-syntax associated to them. Entities which are assigned the entity.name.* scope are considered to be a \"definition\". Because a single .sublime-syntax file has no knowledge of the project structure, there may be multiple such \"definitions\". This package provides a replacement for Sublime's Goto Definition if your language server has this capability. The feature is accessible by right-clicking with your mouse on the word (or any character) and clicking on LSP > Goto Definition. Similarly, an entry in the Goto menu in the top Menu Bar is also available. In addition to the basic \"Goto Definition\", the protocol also provides further refinements of \"goto\" functionality: Goto Type Definition Goto Declaration Goto Implementation","title":"Goto Definition"},{"location":"features/#find-references","text":"Example GIF 1 Example GIF 2 By parsing and indexing a project with .sublime-syntax files, Sublime Text is able to provide an approximation of where a type or function is used. This package provides a replacement of that functionality if your language server has this capability.","title":"Find References"},{"location":"features/#highlights","text":"Example GIF 1 Sublime Text subtly highlights words that equal the one under your caret. This package does that as well, if your language server has that capability. It is enhanced in the sense that a language server can also annotate a region as being written to , to being read from . This is what stock Sublime Text cannot determine.","title":"Highlights"},{"location":"features/#goto-symbol","text":"Example GIF 1 Example GIF 2 Goto Symbol can be accessed by clicking on Goto > Goto Symbol. A common key binding for this is ctrl R . Sublime Text will show a Quick Panel where you can select a symbol from the current buffer. This package provides a replacement if your language server has this capability. Each symbol's type is accurately described, and the start and end positions of each symbol are clearly visible.","title":"Goto Symbol"},{"location":"features/#goto-symbol-in-project","text":"Example GIF 1 Goto Symbol In Project is a great feature of Sublime Text. It is like Goto Symbol, except you can search for a symbol through your entire project. It is a two-step UX process where you first select an identifier, and you are then presented with the possible locations of your selected identifier. This package provides a replacement if your language server has this capability. The \"LSP\" Goto Symbol In Project works slightly different because it is a one-step process instead of a two-step process. You select the appropriate symbol immediately.","title":"Goto Symbol In Project"},{"location":"features/#expand-selection","text":"Example GIF 1 Expand Selection can be accessed by clicking on Selection > Expand Selection. A common key binding for this is ctrl shift A . A language server may also have this capability and is in a better position to decide what a \"smart\" Expand Selection should do.","title":"Expand Selection"},{"location":"features/#hover","text":"Example GIF 1 \"Hover\" is a general term for an informational popup that appears when you bring your mouse to a word in the file. Sublime Text shows the definition(s) and references of the word that is under your caret. The LSP package replaces this built-in hover popup with your language server's hover info, if it has the capability. For instance, it may display type information, documentation, and example usage.","title":"Hover"},{"location":"features/#diagnostics","text":"Example GIF 1 Diagnostics is a general term for \"things that are of interest in the file\". It may be syntax errors, warnings from your compiler, or hints about unused variables in a function. It is incorrect to call this \"lint results\", because diagnostics encompass more than just lint results. It is also incorrect to call these \"problems\", as hints are not really problems. Sublime Text has no concept of diagnostics (nor lint results or problems), and hence does not provide an API endpoint to push diagnostics to the end-user. This package invented its own diagnostics presentation system. The SublimeLinter package provides similar functionality.","title":"Diagnostics"},{"location":"features/#formatting","text":"Example GIF 1 Formatting is the art of computing a minimal set of white space text replacements. Formatting may be applied manually through a command invocation, or automatically when saving the file. Sublime Text has no concept of Formatting.","title":"Formatting"},{"location":"features/#signature-help","text":"Example GIF 1 Signature Help is similar to Auto Complete, but focuses on presenting the different overloads of a function invocation. This package provides Signature Help by means of showing a popup. If multiple overloads exist, you can browse through them just like Auto Complete. Sublime Text has no concept of Signature Help.","title":"Signature Help"},{"location":"features/#rename","text":"Example GIF 1 When you want to rename an identifier in Sublime Text, you probably use ctrl D to select a few next occurences and do the rename with multiple cursors. Because a language server (usually) has an abstract syntax tree view of the file, it may be able to rename an identifier semantically. This package exposes that functionality through the hover popup, the context menu, and the top menu bar. Some language servers provide global rename functionality as well. This package will present a modal dialog to ask you to confirm to apply the changes if they span more than one file.","title":"Rename"},{"location":"features/#code-actions","text":"Example GIF 1 Example GIF 2 Code Actions are an umbrella term for \"Quick Fixes\" and \"Refactorings\". They are actions that change the file (or more than one file) to resolve a diagnostic or apply a standard refactor technique. For instance, extracting a block of code into a separate method is usually called \"Extract Method\" and is a \"Refactoring\". Whereas \"add a missing semicolon\" would resolve a diagnostic that warns about a missing semicolon. Formatting is different from Code Actions, because Formatting is supposed to not mutate the abstract syntax tree of the file, only move around white space. Any Code Action will mutate the abstract syntax tree. This package presents Code Actions as a bluish clickable annotation positioned to the right of the viewport. Alternatively, they can be presented as a light bulb in the Gutter Area. Sublime Text has no concept of Code Actions.","title":"Code Actions"},{"location":"features/#code-lenses","text":"Code Lenses are \"actionable contextual information interspersed\" in your source code. Actionable: You can click on the link and something happens. Contextual: The links are close to the code they are representing. Interspersed: The links are located throughout your source code. This package presents Code Lenses as a greenish clickable annotation positioned to the right of the viewport. Alternatively, they can be presented as phantoms. Sublime Text has no concept of Code Lenses.","title":"Code Lenses"},{"location":"features/#server-commands","text":"In Sublime Text you can bind any runnable command to a key or add it to various UI elements. Commands in Sublime Text are normally supplied by plugins or packages written in Python. A language server may provide a runnable command as well. These kinds of commands are wrapped in an lsp_execute Sublime command that you can bind to a key.","title":"Server Commands"},{"location":"features/#server-settings","text":"Regular Sublime Text packages provide settings to adjust their behavior either via a .sublime-settings file that you can override in Packages/User/package-name.sublime-settings . A package may also allow customization through the Packages/User/Preferences.sublime-settings file and/or syntax-specific or project-specific settings. A language server may itself also expose settings that you can use to customize its behavior. For instance certain linter settings. This package allows customizing language server settings.","title":"Server Settings"},{"location":"features/#server-initialization-options","text":"Initialization Options are like Server Settings , except they are static in the sense that they cannot be changed once the language server subprocess has started.","title":"Server Initialization Options"},{"location":"features/#subprocesses","text":"A language server usually runs as a long-lived subprocess of Sublime Text. Once you start Sublime Text and open a view, the syntax of that view is matched against any possible client configurations registered. If a client configuration matches, a subprocess is started that will then serve you language smartness.","title":"Subprocesses"},{"location":"keyboard_shortcuts/","text":"Below is a list of supported commands and the corresponding keyboard shortcut (if assigned). Most of those are also available from the Command Palette, the main menu and the mouse context menu. Refer to the Customization section on how to modify or assign shortcuts to them. Mac If you using macOS, replace ctrl with command . Feature Shortcut Command Auto Complete ctrl space (also on macOS) auto_complete Expand Selection unbound lsp_expand_selection Find References shift f12 lsp_symbol_references Format File unbound lsp_format_document Format Selection unbound lsp_format_document_range Goto Declaration unbound lsp_symbol_declaration Goto Definition unbound suggested: f12 lsp_symbol_definition Goto Implementation unbound lsp_symbol_implementation Goto Symbol unbound suggested: ctrl r lsp_document_symbols Goto Symbol in Project unbound suggested: ctrl shift r lsp_workspace_symbols Goto Type Definition unbound lsp_symbol_type_definition Next Diagnostic F4 - Previous Diagnostic shift F4 - Rename unbound lsp_symbol_rename Restart Server unbound lsp_restart_server Run Code Action unbound lsp_code_actions Run Source Action unbound lsp_code_actions (with args: {\"only_kinds\": [\"source\"]} ) Run Code Lens unbound lsp_code_lens Signature Help ctrl alt space - Hover Popup unbound lsp_hover Toggle Diagnostics Panel ctrl alt m lsp_show_diagnostics_panel Toggle Log Panel unbound lsp_toggle_server_panel","title":"Keyboard Shortcuts"},{"location":"language_servers/","text":"Language Servers # Follow the setup steps for a language server to get it up and running. If you encounter problems, consult the common issues page or search the LSP issues before opening new ones. If there are no setup steps for a language server on this page, but a language server implementation exist, follow the guide for creating a client configuration . Pull requests for adding a new client configuration are welcome. We recommend installing LSP-json . LSP-json provides completions and diagnostics when editing JSON files that adhere to a JSON schema. For legacy ST3 docs, see lsp.readthedocs.io . Angular # Follow installation instructions on LSP-angular . Bash # Follow installation instructions on LSP-bash . Also see Shell . Bicep # Follow installation instructions on LSP-Bicep . C/C++ # See the dedicated C/C++ guide for using ccls or clangd. C# # Follow installation instructions on LSP-OmniSharp . Clojure # Download clojure-lsp . Open Preferences > Package Settings > LSP > Settings and add the \"clojure-lsp\" client configuration to the \"clients\" : { \"clients\" : { \"clojure-lsp\" : { \"enabled\" : true , \"command\" : [ \"java\" , \"-jar\" , \"/PATH/TO/clojure-lsp\" ], // Upda te t he PATH \"selector\" : \"source.clojure\" , \"initializationOptions\" : {} } } } See available initializationOptions . CSS # Follow installation instructions on LSP-css . D # Install the D Language Server . Open Preferences > Package Settings > LSP > Settings and add the \"dls\" client configuration to the \"clients\" : { \"clients\" : { \"dls\" : { \"enabled\" : true , \"command\" : [ \"/PATH/TO/DLS_EXECUTABLE\" ], // Upda te t he PATH \"selector\" : \"source.d\" } } } Dart # Follow installation instructions on LSP-Dart . Dockerfile # Follow installation instructions on LSP-dockerfile . Elixir # Follow installation instructions on LSP-elixir . Elm # Follow installation instructions on LSP-elm . Erlang # Install the Erlang Language Server . Open Preferences > Package Settings > LSP > Settings and add the \"erlang-ls\" client configuration to the \"clients\" : { \"clients\" : { \"erlang-ls\" : { \"enabled\" : true , \"command\" : [ \"/PATH/TO/erlang_ls\" , \"--transport\" , \"stdio\" ], // Upda te t he PATH \"selector\" : \"source.erlang\" } } } ESLint # Follow installation instructions on LSP-eslint . F# # Install the F# package from Package Control for syntax highlighting. Make sure you have installed the latest .NET SDK . Install the FsAutoComplete from command prompt using the following command: dotnet tool install --global fsautocomplete Open Preferences > Package Settings > LSP > Settings and add the \"fsautocomplete\" client configuration to the \"clients\" : { \"clients\" : { \"fsautocomplete\" : { \"enabled\" : true , \"command\" : [ \"dotnet\" , \"fsautocomplete\" , \"--background-service-enabled\" ], \"selector\" : \"source.fsharp\" , \"initializationOptions\" : { \"AutomaticWorkspaceInit\" : true } } } } Flow # Follow installation instructions on LSP-flow . Fortran # Install the Fortran package from Package Control for syntax highlighting. Install the Fortran Language Server . Open Preferences > Package Settings > LSP > Settings and add the \"fortls\" client configuration to the \"clients\" : { \"clients\" : { \"fortls\" : { \"enabled\" : true , \"command\" : [ \"fortls\" ], \"selector\" : \"source.modern-fortran | source.fixedform-fortran\" } } } See available configuration options . For example set \"command\": [\"fortls\", \"--lowercase_intrinsics\"] to use lowercase for autocomplete suggestions. Go # Install gopls . Open Preferences > Package Settings > LSP > Settings and add the \"gopls\" client configuration to the \"clients\" : { \"clients\" : { \"gopls\" : { \"enabled\" : true , \"command\" : [ \"gopls\" ], \"selector\" : \"source.go\" , \"initializationOptions\" : { \"experimentalWorkspaceModule\" : false } } } } Visit gopls repo for more info. Enable multi-module workspace support by setting the experimentalWorkspaceModule to true . Most features will work across modules, but some, such as goimports , will not work as expected. Please note that this setting is still very experimental. GraphQL # Follow installation instructions on LSP-graphql . Haskell # Install haskell-language-server . Open Preferences > Package Settings > LSP > Settings and add the \"haskell-language-server\" client configuration to the \"clients\" : { \"clients\" : { \"haskell-language-server\" : { \"enabled\" : true , \"command\" : [ \"haskell-language-server-wrapper\" , \"--lsp\" ], \"selector\" : \"source.haskell\" } } } HTML # Follow installation instructions on LSP-html . Java # Follow installation instructions on LSP-jdtls . JSON # Follow installation instructions on LSP-json . Julia # Install the Julia package from Package Control for syntax highlighting. Install the LanguageServer and SymbolServer packages from the Julia REPL: import Pkg; Pkg.add(\"LanguageServer\") Pkg.add(\"SymbolServer\") Open Preferences > Package Settings > LSP > Settings and add the \"julials\" client configuration to the \"clients\" : { \"clients\" : { \"julials\" : { \"enabled\" : true , \"command\" : [ \"bash\" , \"PATH_TO_JULIA_SERVER/LanguageServer/contrib/languageserver.sh\" ], // o n Li nu x/macOS // \"command\" : [ \"julia\" , \"--startup-file=no\" , \"--history-file=no\" , \"-e\" , \"using Pkg; using LanguageServer; using LanguageServer.SymbolServer; env_path=dirname(Pkg.Types.Context().env.project_file); server=LanguageServer.LanguageServerInstance(stdin,stdout,false,env_path); run(server)\" ], // o n Wi n dows \"selector\" : \"source.julia\" , \"settings\" : { // De fault values fr om VS Code : \"julia.format.calls\" : true , // Forma t fun c t io n calls \"julia.format.comments\" : true , // Forma t comme nts \"julia.format.curly\" : true , // Forma t braces \"julia.format.docs\" : true , // Forma t i nl i ne docume ntat io n \"julia.format.indent\" : 4 , // I n de nt size f or f orma tt i n g \"julia.format.indents\" : true , // Forma t f ile i n de nts \"julia.format.iterOps\" : true , // Forma t loop i terat ors \"julia.format.kw\" : true , // Remove spaces arou n d = i n fun c t io n keywords \"julia.format.lineends\" : false , // [ u n docume nte d ] \"julia.format.ops\" : true , // Forma t whi tes pace arou n d opera t ors \"julia.format.tuples\" : true , // Forma t tu ples \"julia.lint.call\" : false , // Check calls agai nst exis t i n g me t hods (experime ntal ) \"julia.lint.constif\" : true , // Check f or co nstant co n di t io nals o f i f s tate me nts \"julia.lint.datadecl\" : false , // [ u n docume nte d ] \"julia.lint.iter\" : true , // Check i terat or sy nta x o f loops \"julia.lint.lazy\" : true , // Check f or de ter mi n is t ic lazy boolea n opera t ors \"julia.lint.modname\" : true , // Check f or i n valid submodule na mes \"julia.lint.nothingcomp\" : false , // [ u n docume nte d ] \"julia.lint.pirates\" : true , // Check f or t ype piracy \"julia.lint.run\" : true , // ru n t he li nter o n ac t ive f iles \"julia.lint.typeparam\" : true // Check f or u nuse d Da ta Type parame ters } } } } Kotlin # Install the Kotlin package from Package Control for syntax highlighting. Install the Kotlin Language Server (requires building first). Open Preferences > Package Settings > LSP > Settings and add the \"kotlinls\" client configuration to the \"clients\" : { \"clients\" : { \"kotlinls\" : { \"enabled\" : true , \"command\" : [ \"PATH/TO/KotlinLanguageServer/build/install/kotlin-language-server/bin/kotlin-language-server.bat\" ], // Upda te t he PATH \"selector\" : \"source.Kotlin\" , \"settings\" : { \"kotlin\" : { // pu t your server se tt i n gs here } } } } } LaTeX # There are multiple options: TexLab # Follow installation instructions on LSP-TexLab . LTeX # Follow installation instructions on LSP-ltex-ls . Lisp # Install cc-lsp using Roswell. Open Preferences > Package Settings > LSP > Settings and add the \"cc-lsp\" client configuration to the \"clients\" : { \"clients\" : { \"cc-lsp\" : { \"enabled\" : true , \"command\" : [ \"cl-lsp\" , \"stdio\" ], \"selector\" : \"source.lisp\" } } } Leo # Follow installation instructions on LSP-leo . Lua # Follow installation instructions on LSP-lua . OCaml/Reason # Install the Reason package from Package Control for syntax highlighting. Install the Reason Language Server . Open Preferences > Package Settings > LSP > Settings and add the \"reason\" client configuration to the \"clients\" : { \"clients\" : { \"reason\" : { \"enabled\" : true , \"command\" : [ \"PATH/TO/reason-language-server.exe\" ], // Upda te t he PATH \"selector\" : \"source.ocaml | source.reason\" } } } PromQL # Follow installation instructions on LSP-promql . PHP # There are multiple options: Intelephense # Follow installation instructions on LSP-intelephense . Phpactor # Install Phpactor globally . Open Preferences > Package Settings > LSP > Settings and add the \"phpactor\" client configuration to the \"clients\" : { \"clients\" : { \"phpactor\" : { \"enabled\" : true , \"command\" : [ \"PATH/TO/phpactor\" , \"language-server\" ], \"selector\" : \"source.php\" } } } PowerShell # Follow installation instructions on LSP-PowerShellEditorServices . Python # There are multiple options: Pyright # Follow installation instructions on LSP-pyright . Python LSP Server # Follow installation instructions on LSP-pylsp . R # Follow installation instructions on R-IDE . Ruby / Ruby on Rails # There are multiple options: Solargraph # Install solargraph . Open Preferences > Package Settings > LSP > Settings and add the \"ruby\" client configuration to the \"clients\" : { \"clients\" : { \"ruby\" : { \"enabled\" : true , \"command\" : [ \"solargraph\" , \"stdio\" ], \"selector\" : \"source.ruby | text.html.ruby\" , \"initializationOptions\" : { \"diagnostics\" : false } } } } Sorbet # Install the sorbet and sorbet-runtime gem (see github:sorbet/sorbet ): gem install sorbet gem install sorbet-runtime If you have a Gemfile, using bundler, add sorbet and sorbet-runtime to your Gemfile and run: bundle install Open Preferences > Package Settings > LSP > Settings and add the \"sorbet\" client configuration to the \"clients\" : { \"clients\" : { \"sorbet\" : { \"enabled\" : true , \"command\" : [ \"srb\" , \"tc\" , \"--typed\" , \"true\" , \"--enable-all-experimental-lsp-features\" , \"--lsp\" , \"--disable-watchman\" ], \"selector\" : \"source.ruby | text.html.ruby\" , } } } Rust # There are multiple options: Rust Analyzer # Download a binary from the release page of rust-analyzer . Rename the binary to rust-analyzer . Make sure the binary is in your $PATH . Open Preferences > Package Settings > LSP > Settings and add the \"rust-analyzer\" client configuration to the \"clients\" : { \"clients\" : { \"rust-analyzer\" : { \"enabled\" : true , \"command\" : [ \"rust-analyzer\" ], \"selector\" : \"source.rust\" } } } Scala # Follow installation instructions on LSP-metals . Shell # Install shellcheck (follow instructions in the repo). Install the diagnostic-languageserver server. # with NPM npm i -g diagnostic-languageserver # or with Yarn yarn global add diagnostic-languageserver 3. Open Preferences > Package Settings > LSP > Settings and add the \"diagnostic-ls\" client configuration to the \"clients\" : { \"clients\" : { \"diagnostic-ls\" : { \"enabled\" : true , \"command\" : [ \"diagnostic-languageserver\" , \"--stdio\" ], \"selector\" : \"source.shell.bash\" , \"initializationOptions\" : { \"linters\" : { \"shellcheck\" : { \"command\" : \"shellcheck\" , \"args\" : [ \"--format=json\" , \"-\" ], \"debounce\" : 100 , \"formatLines\" : 1 , \"offsetLine\" : 0 , \"offsetColumn\" : 0 , \"sourceName\" : \"shellcheck\" , \"parseJson\" : { \"line\" : \"line\" , \"column\" : \"column\" , \"endLine\" : \"endLine\" , \"endColumn\" : \"endColumn\" , \"security\" : \"level\" , \"message\" : \"\\\\${message} [\\\\${code}]\" , }, \"securities\" : { \"error\" : \"error\" , \"warning\" : \"warning\" , \"note\" : \"info\" , }, } }, \"formatters\" : {}, \"filetypes\" : { \"shellscript\" : \"shellcheck\" , } } } } } Stylelint # Follow installation instructions on LSP-stylelint . Svelte # Follow installation instructions on LSP-svelte . Swift # Follow installation instructions on LSP-SourceKit . TAGML # Follow installation instructions on LSP-tagml . Tailwind CSS # Follow installation instructions on LSP-tailwindcss . Terraform # Install the Terraform package from Package Control for syntax highlighting. Download terraform-lsp binary and make it available in your PATH. Open Preferences > Package Settings > LSP > Settings and add the \"terraform\" client configuration to the \"clients\" : { \"clients\" : { \"terraform\" : { \"enabled\" : true , \"command\" : [ \"terraform-lsp\" ], \"selector\" : \"source.terraform\" } } } TypeScript / JavaScript # Follow installation instructions on LSP-typescript . For development using the Deno framework follow installation instructions on LSP-Deno . Vue # There are multiple options: Vetur # Follow installation instructions on LSP-vue . Volar # Follow installation instructions on LSP-volar . Vala # Install the Vala-TMBundle package from Package Control to add Vala syntax highlighting and for Vala files to be reconginsed. Install the Vala Language Server Add Vala Langauge Server to LSP settings: { \"clients\" : { \"vala-language-server\" : { \"command\" : [ \"/path/to/vala-language-server\" ], \"selector\" : \"source.vala | source.genie\" }, }, } Enable the Vala Langauge Server for the project by going to Tools > LSP > Enable Language Server In Project... For the server to fully understand your code, you will need to generate a compile_commands.json file or build your project with meson . XML # Follow installation instructions on LSP-lemminx . YAML # Follow installation instructions on LSP-yaml .","title":"Language Servers"},{"location":"language_servers/#language-servers","text":"Follow the setup steps for a language server to get it up and running. If you encounter problems, consult the common issues page or search the LSP issues before opening new ones. If there are no setup steps for a language server on this page, but a language server implementation exist, follow the guide for creating a client configuration . Pull requests for adding a new client configuration are welcome. We recommend installing LSP-json . LSP-json provides completions and diagnostics when editing JSON files that adhere to a JSON schema. For legacy ST3 docs, see lsp.readthedocs.io .","title":"Language Servers"},{"location":"language_servers/#angular","text":"Follow installation instructions on LSP-angular .","title":"Angular"},{"location":"language_servers/#bash","text":"Follow installation instructions on LSP-bash . Also see Shell .","title":"Bash"},{"location":"language_servers/#bicep","text":"Follow installation instructions on LSP-Bicep .","title":"Bicep"},{"location":"language_servers/#cc","text":"See the dedicated C/C++ guide for using ccls or clangd.","title":"C/C++"},{"location":"language_servers/#c","text":"Follow installation instructions on LSP-OmniSharp .","title":"C#"},{"location":"language_servers/#clojure","text":"Download clojure-lsp . Open Preferences > Package Settings > LSP > Settings and add the \"clojure-lsp\" client configuration to the \"clients\" : { \"clients\" : { \"clojure-lsp\" : { \"enabled\" : true , \"command\" : [ \"java\" , \"-jar\" , \"/PATH/TO/clojure-lsp\" ], // Upda te t he PATH \"selector\" : \"source.clojure\" , \"initializationOptions\" : {} } } } See available initializationOptions .","title":"Clojure"},{"location":"language_servers/#css","text":"Follow installation instructions on LSP-css .","title":"CSS"},{"location":"language_servers/#d","text":"Install the D Language Server . Open Preferences > Package Settings > LSP > Settings and add the \"dls\" client configuration to the \"clients\" : { \"clients\" : { \"dls\" : { \"enabled\" : true , \"command\" : [ \"/PATH/TO/DLS_EXECUTABLE\" ], // Upda te t he PATH \"selector\" : \"source.d\" } } }","title":"D"},{"location":"language_servers/#dart","text":"Follow installation instructions on LSP-Dart .","title":"Dart"},{"location":"language_servers/#dockerfile","text":"Follow installation instructions on LSP-dockerfile .","title":"Dockerfile"},{"location":"language_servers/#elixir","text":"Follow installation instructions on LSP-elixir .","title":"Elixir"},{"location":"language_servers/#elm","text":"Follow installation instructions on LSP-elm .","title":"Elm"},{"location":"language_servers/#erlang","text":"Install the Erlang Language Server . Open Preferences > Package Settings > LSP > Settings and add the \"erlang-ls\" client configuration to the \"clients\" : { \"clients\" : { \"erlang-ls\" : { \"enabled\" : true , \"command\" : [ \"/PATH/TO/erlang_ls\" , \"--transport\" , \"stdio\" ], // Upda te t he PATH \"selector\" : \"source.erlang\" } } }","title":"Erlang"},{"location":"language_servers/#eslint","text":"Follow installation instructions on LSP-eslint .","title":"ESLint"},{"location":"language_servers/#f","text":"Install the F# package from Package Control for syntax highlighting. Make sure you have installed the latest .NET SDK . Install the FsAutoComplete from command prompt using the following command: dotnet tool install --global fsautocomplete Open Preferences > Package Settings > LSP > Settings and add the \"fsautocomplete\" client configuration to the \"clients\" : { \"clients\" : { \"fsautocomplete\" : { \"enabled\" : true , \"command\" : [ \"dotnet\" , \"fsautocomplete\" , \"--background-service-enabled\" ], \"selector\" : \"source.fsharp\" , \"initializationOptions\" : { \"AutomaticWorkspaceInit\" : true } } } }","title":"F#"},{"location":"language_servers/#flow","text":"Follow installation instructions on LSP-flow .","title":"Flow"},{"location":"language_servers/#fortran","text":"Install the Fortran package from Package Control for syntax highlighting. Install the Fortran Language Server . Open Preferences > Package Settings > LSP > Settings and add the \"fortls\" client configuration to the \"clients\" : { \"clients\" : { \"fortls\" : { \"enabled\" : true , \"command\" : [ \"fortls\" ], \"selector\" : \"source.modern-fortran | source.fixedform-fortran\" } } } See available configuration options . For example set \"command\": [\"fortls\", \"--lowercase_intrinsics\"] to use lowercase for autocomplete suggestions.","title":"Fortran"},{"location":"language_servers/#go","text":"Install gopls . Open Preferences > Package Settings > LSP > Settings and add the \"gopls\" client configuration to the \"clients\" : { \"clients\" : { \"gopls\" : { \"enabled\" : true , \"command\" : [ \"gopls\" ], \"selector\" : \"source.go\" , \"initializationOptions\" : { \"experimentalWorkspaceModule\" : false } } } } Visit gopls repo for more info. Enable multi-module workspace support by setting the experimentalWorkspaceModule to true . Most features will work across modules, but some, such as goimports , will not work as expected. Please note that this setting is still very experimental.","title":"Go"},{"location":"language_servers/#graphql","text":"Follow installation instructions on LSP-graphql .","title":"GraphQL"},{"location":"language_servers/#haskell","text":"Install haskell-language-server . Open Preferences > Package Settings > LSP > Settings and add the \"haskell-language-server\" client configuration to the \"clients\" : { \"clients\" : { \"haskell-language-server\" : { \"enabled\" : true , \"command\" : [ \"haskell-language-server-wrapper\" , \"--lsp\" ], \"selector\" : \"source.haskell\" } } }","title":"Haskell"},{"location":"language_servers/#html","text":"Follow installation instructions on LSP-html .","title":"HTML"},{"location":"language_servers/#java","text":"Follow installation instructions on LSP-jdtls .","title":"Java"},{"location":"language_servers/#json","text":"Follow installation instructions on LSP-json .","title":"JSON"},{"location":"language_servers/#julia","text":"Install the Julia package from Package Control for syntax highlighting. Install the LanguageServer and SymbolServer packages from the Julia REPL: import Pkg; Pkg.add(\"LanguageServer\") Pkg.add(\"SymbolServer\") Open Preferences > Package Settings > LSP > Settings and add the \"julials\" client configuration to the \"clients\" : { \"clients\" : { \"julials\" : { \"enabled\" : true , \"command\" : [ \"bash\" , \"PATH_TO_JULIA_SERVER/LanguageServer/contrib/languageserver.sh\" ], // o n Li nu x/macOS // \"command\" : [ \"julia\" , \"--startup-file=no\" , \"--history-file=no\" , \"-e\" , \"using Pkg; using LanguageServer; using LanguageServer.SymbolServer; env_path=dirname(Pkg.Types.Context().env.project_file); server=LanguageServer.LanguageServerInstance(stdin,stdout,false,env_path); run(server)\" ], // o n Wi n dows \"selector\" : \"source.julia\" , \"settings\" : { // De fault values fr om VS Code : \"julia.format.calls\" : true , // Forma t fun c t io n calls \"julia.format.comments\" : true , // Forma t comme nts \"julia.format.curly\" : true , // Forma t braces \"julia.format.docs\" : true , // Forma t i nl i ne docume ntat io n \"julia.format.indent\" : 4 , // I n de nt size f or f orma tt i n g \"julia.format.indents\" : true , // Forma t f ile i n de nts \"julia.format.iterOps\" : true , // Forma t loop i terat ors \"julia.format.kw\" : true , // Remove spaces arou n d = i n fun c t io n keywords \"julia.format.lineends\" : false , // [ u n docume nte d ] \"julia.format.ops\" : true , // Forma t whi tes pace arou n d opera t ors \"julia.format.tuples\" : true , // Forma t tu ples \"julia.lint.call\" : false , // Check calls agai nst exis t i n g me t hods (experime ntal ) \"julia.lint.constif\" : true , // Check f or co nstant co n di t io nals o f i f s tate me nts \"julia.lint.datadecl\" : false , // [ u n docume nte d ] \"julia.lint.iter\" : true , // Check i terat or sy nta x o f loops \"julia.lint.lazy\" : true , // Check f or de ter mi n is t ic lazy boolea n opera t ors \"julia.lint.modname\" : true , // Check f or i n valid submodule na mes \"julia.lint.nothingcomp\" : false , // [ u n docume nte d ] \"julia.lint.pirates\" : true , // Check f or t ype piracy \"julia.lint.run\" : true , // ru n t he li nter o n ac t ive f iles \"julia.lint.typeparam\" : true // Check f or u nuse d Da ta Type parame ters } } } }","title":"Julia"},{"location":"language_servers/#kotlin","text":"Install the Kotlin package from Package Control for syntax highlighting. Install the Kotlin Language Server (requires building first). Open Preferences > Package Settings > LSP > Settings and add the \"kotlinls\" client configuration to the \"clients\" : { \"clients\" : { \"kotlinls\" : { \"enabled\" : true , \"command\" : [ \"PATH/TO/KotlinLanguageServer/build/install/kotlin-language-server/bin/kotlin-language-server.bat\" ], // Upda te t he PATH \"selector\" : \"source.Kotlin\" , \"settings\" : { \"kotlin\" : { // pu t your server se tt i n gs here } } } } }","title":"Kotlin"},{"location":"language_servers/#latex","text":"There are multiple options:","title":"LaTeX"},{"location":"language_servers/#texlab","text":"Follow installation instructions on LSP-TexLab .","title":"TexLab"},{"location":"language_servers/#ltex","text":"Follow installation instructions on LSP-ltex-ls .","title":"LTeX"},{"location":"language_servers/#lisp","text":"Install cc-lsp using Roswell. Open Preferences > Package Settings > LSP > Settings and add the \"cc-lsp\" client configuration to the \"clients\" : { \"clients\" : { \"cc-lsp\" : { \"enabled\" : true , \"command\" : [ \"cl-lsp\" , \"stdio\" ], \"selector\" : \"source.lisp\" } } }","title":"Lisp"},{"location":"language_servers/#leo","text":"Follow installation instructions on LSP-leo .","title":"Leo"},{"location":"language_servers/#lua","text":"Follow installation instructions on LSP-lua .","title":"Lua"},{"location":"language_servers/#ocamlreason","text":"Install the Reason package from Package Control for syntax highlighting. Install the Reason Language Server . Open Preferences > Package Settings > LSP > Settings and add the \"reason\" client configuration to the \"clients\" : { \"clients\" : { \"reason\" : { \"enabled\" : true , \"command\" : [ \"PATH/TO/reason-language-server.exe\" ], // Upda te t he PATH \"selector\" : \"source.ocaml | source.reason\" } } }","title":"OCaml/Reason"},{"location":"language_servers/#promql","text":"Follow installation instructions on LSP-promql .","title":"PromQL"},{"location":"language_servers/#php","text":"There are multiple options:","title":"PHP"},{"location":"language_servers/#intelephense","text":"Follow installation instructions on LSP-intelephense .","title":"Intelephense"},{"location":"language_servers/#phpactor","text":"Install Phpactor globally . Open Preferences > Package Settings > LSP > Settings and add the \"phpactor\" client configuration to the \"clients\" : { \"clients\" : { \"phpactor\" : { \"enabled\" : true , \"command\" : [ \"PATH/TO/phpactor\" , \"language-server\" ], \"selector\" : \"source.php\" } } }","title":"Phpactor"},{"location":"language_servers/#powershell","text":"Follow installation instructions on LSP-PowerShellEditorServices .","title":"PowerShell"},{"location":"language_servers/#python","text":"There are multiple options:","title":"Python"},{"location":"language_servers/#pyright","text":"Follow installation instructions on LSP-pyright .","title":"Pyright"},{"location":"language_servers/#python-lsp-server","text":"Follow installation instructions on LSP-pylsp .","title":"Python LSP Server"},{"location":"language_servers/#r","text":"Follow installation instructions on R-IDE .","title":"R"},{"location":"language_servers/#ruby-ruby-on-rails","text":"There are multiple options:","title":"Ruby / Ruby on Rails"},{"location":"language_servers/#solargraph","text":"Install solargraph . Open Preferences > Package Settings > LSP > Settings and add the \"ruby\" client configuration to the \"clients\" : { \"clients\" : { \"ruby\" : { \"enabled\" : true , \"command\" : [ \"solargraph\" , \"stdio\" ], \"selector\" : \"source.ruby | text.html.ruby\" , \"initializationOptions\" : { \"diagnostics\" : false } } } }","title":"Solargraph"},{"location":"language_servers/#sorbet","text":"Install the sorbet and sorbet-runtime gem (see github:sorbet/sorbet ): gem install sorbet gem install sorbet-runtime If you have a Gemfile, using bundler, add sorbet and sorbet-runtime to your Gemfile and run: bundle install Open Preferences > Package Settings > LSP > Settings and add the \"sorbet\" client configuration to the \"clients\" : { \"clients\" : { \"sorbet\" : { \"enabled\" : true , \"command\" : [ \"srb\" , \"tc\" , \"--typed\" , \"true\" , \"--enable-all-experimental-lsp-features\" , \"--lsp\" , \"--disable-watchman\" ], \"selector\" : \"source.ruby | text.html.ruby\" , } } }","title":"Sorbet"},{"location":"language_servers/#rust","text":"There are multiple options:","title":"Rust"},{"location":"language_servers/#rust-analyzer","text":"Download a binary from the release page of rust-analyzer . Rename the binary to rust-analyzer . Make sure the binary is in your $PATH . Open Preferences > Package Settings > LSP > Settings and add the \"rust-analyzer\" client configuration to the \"clients\" : { \"clients\" : { \"rust-analyzer\" : { \"enabled\" : true , \"command\" : [ \"rust-analyzer\" ], \"selector\" : \"source.rust\" } } }","title":"Rust Analyzer"},{"location":"language_servers/#scala","text":"Follow installation instructions on LSP-metals .","title":"Scala"},{"location":"language_servers/#shell","text":"Install shellcheck (follow instructions in the repo). Install the diagnostic-languageserver server. # with NPM npm i -g diagnostic-languageserver # or with Yarn yarn global add diagnostic-languageserver 3. Open Preferences > Package Settings > LSP > Settings and add the \"diagnostic-ls\" client configuration to the \"clients\" : { \"clients\" : { \"diagnostic-ls\" : { \"enabled\" : true , \"command\" : [ \"diagnostic-languageserver\" , \"--stdio\" ], \"selector\" : \"source.shell.bash\" , \"initializationOptions\" : { \"linters\" : { \"shellcheck\" : { \"command\" : \"shellcheck\" , \"args\" : [ \"--format=json\" , \"-\" ], \"debounce\" : 100 , \"formatLines\" : 1 , \"offsetLine\" : 0 , \"offsetColumn\" : 0 , \"sourceName\" : \"shellcheck\" , \"parseJson\" : { \"line\" : \"line\" , \"column\" : \"column\" , \"endLine\" : \"endLine\" , \"endColumn\" : \"endColumn\" , \"security\" : \"level\" , \"message\" : \"\\\\${message} [\\\\${code}]\" , }, \"securities\" : { \"error\" : \"error\" , \"warning\" : \"warning\" , \"note\" : \"info\" , }, } }, \"formatters\" : {}, \"filetypes\" : { \"shellscript\" : \"shellcheck\" , } } } } }","title":"Shell"},{"location":"language_servers/#stylelint","text":"Follow installation instructions on LSP-stylelint .","title":"Stylelint"},{"location":"language_servers/#svelte","text":"Follow installation instructions on LSP-svelte .","title":"Svelte"},{"location":"language_servers/#swift","text":"Follow installation instructions on LSP-SourceKit .","title":"Swift"},{"location":"language_servers/#tagml","text":"Follow installation instructions on LSP-tagml .","title":"TAGML"},{"location":"language_servers/#tailwind-css","text":"Follow installation instructions on LSP-tailwindcss .","title":"Tailwind CSS"},{"location":"language_servers/#terraform","text":"Install the Terraform package from Package Control for syntax highlighting. Download terraform-lsp binary and make it available in your PATH. Open Preferences > Package Settings > LSP > Settings and add the \"terraform\" client configuration to the \"clients\" : { \"clients\" : { \"terraform\" : { \"enabled\" : true , \"command\" : [ \"terraform-lsp\" ], \"selector\" : \"source.terraform\" } } }","title":"Terraform"},{"location":"language_servers/#typescript-javascript","text":"Follow installation instructions on LSP-typescript . For development using the Deno framework follow installation instructions on LSP-Deno .","title":"TypeScript / JavaScript"},{"location":"language_servers/#vue","text":"There are multiple options:","title":"Vue"},{"location":"language_servers/#vetur","text":"Follow installation instructions on LSP-vue .","title":"Vetur"},{"location":"language_servers/#volar","text":"Follow installation instructions on LSP-volar .","title":"Volar"},{"location":"language_servers/#vala","text":"Install the Vala-TMBundle package from Package Control to add Vala syntax highlighting and for Vala files to be reconginsed. Install the Vala Language Server Add Vala Langauge Server to LSP settings: { \"clients\" : { \"vala-language-server\" : { \"command\" : [ \"/path/to/vala-language-server\" ], \"selector\" : \"source.vala | source.genie\" }, }, } Enable the Vala Langauge Server for the project by going to Tools > LSP > Enable Language Server In Project... For the server to fully understand your code, you will need to generate a compile_commands.json file or build your project with meson .","title":"Vala"},{"location":"language_servers/#xml","text":"Follow installation instructions on LSP-lemminx .","title":"XML"},{"location":"language_servers/#yaml","text":"Follow installation instructions on LSP-yaml .","title":"YAML"},{"location":"troubleshooting/","text":"Self-help instructions # To get more visibility into the inner-workings of the LSP client and the server and be able to diagnose problems, open Preferences: LSP Settings from the Command Palette and set the following options: Option Description log_debug: true Show verbose debug messages in the Sublime Text console. log_server: [\"panel\"] Log communication from and to language servers in the output panel. Once enabled (no restart necessary), the communication log can be seen by running LSP: Toggle Log Panel from the Command Palette. It might be a good idea to restart Sublime Text and reproduce the issue again, so that the logs are clean. If you believe the issue is with this package, please include the output from the Sublime console in your issue report! If the server is crashing on startup, try running LSP: Troubleshoot server from the Command Palette and check the \"Server output\" for potential errors. Consider sharing the output of this command in the report. Updating the PATH used by LSP servers # Sublime Text might see a different PATH from what your shell environment uses and might not be able to find the server binary due to that. You can see what ST thinks your PATH is by opening the ST console by clicking on View > Show Console , and running import os; os.environ[\"PATH\"] in that console. The solution is to make ST use the same PATH that is read by your shell (or OS in general in the case of Windows). Adjusting PATH can differ based on the operating system and the default shell used. Refer to the following table on where this should be adjusted: Windows Open Start Menu, type \"environment\" and select \"Edit environment variables for your account\". Modify the \"Path\" variable so that it includes the directory path to the program of your choice. macOS Depending on your default shell, edit: ~/.profile (bash), ~/.zprofile (zsh) or ~/.config/fish/config.fish (fish). Linux Edit ~/.profile . For macOS and Linux you can extend the path like so: export PATH = \"/usr/local/bin: $PATH \" For package managers like nvm (Node version manager), the recommended way is to insert its initialization script in the respective location specified above. Note On macOS, it's enough to restart ST for the changes to be picked up. On other platforms, you might have to re-login your user account. Another solution could be (at least on Linux) to update the server PATH using the env parameter in your LSP configuration file. The following template can be used where: <your_language_server_name> is the server name <added_path> is the directory needed for the server to behave correctly \"<your_language_server_name>\" : { // ... \"env\" : { \"PATH\" : \"<added_path>:/usr/local/bin\" } } Common problems # 1. LSP doesn't start my language server # When language server is started, its name appears on the left side of the status bar. If you expect your server to start for a particular file but it doesn't then: Make sure that the root scope (eg. source.php ) of the file matches the scope handled by the language server. You can check the root scope of the file by running Show Scope Name from the Tools -> Developer menu. Refer to the documentation of the language server or its own settings to know the expected scope. Make sure that the language server is not disabled globally either in its own settings or in Preferences: LSP Settings , or in the project settings ( Project: Edit Project from the Command Palette). 2. LSP cannot find my language server ( No such file or directory: 'xyz' ) # If you are getting an error that the server binary can't be found but it does start when running it from the terminal, then the issue is likely due to Sublime Text's internal environment not picking up the same PATH environment variable as you've configured in your shell. See \"Updating the PATH used by LSP servers\" on how to make Sublime Text aware of the location of your langugage server. 3. Popup error Language server <your_server_language_name> has crashed # The reason for this can be the same as in problem number 2. Additionally, the language servers may have dependencies that should also be in your PATH in addition to the server binary itself. For instance if you have installed the haskell-language-server using ghcup-hs you should expose its specific installation folder ~/.ghcup/bin . If the build process uses stack then it should also be in your PATH . If that doesn't solve the issue, try running LSP: Troubleshoot server and providing its output when asking for help. Known Issues # Completions not shown after certain keywords # Sublime Text's built-in Completion Rules.tmPreferences for some languages suppresses completions after certain keywords. The solution is to put an edited version of the Completion Rules.tmPreferences in the Packages folder (you may need to clear the copy in the Cache folder afterwards). More details on workaround and a final fix for Lua","title":"Troubleshooting"},{"location":"troubleshooting/#self-help-instructions","text":"To get more visibility into the inner-workings of the LSP client and the server and be able to diagnose problems, open Preferences: LSP Settings from the Command Palette and set the following options: Option Description log_debug: true Show verbose debug messages in the Sublime Text console. log_server: [\"panel\"] Log communication from and to language servers in the output panel. Once enabled (no restart necessary), the communication log can be seen by running LSP: Toggle Log Panel from the Command Palette. It might be a good idea to restart Sublime Text and reproduce the issue again, so that the logs are clean. If you believe the issue is with this package, please include the output from the Sublime console in your issue report! If the server is crashing on startup, try running LSP: Troubleshoot server from the Command Palette and check the \"Server output\" for potential errors. Consider sharing the output of this command in the report.","title":"Self-help instructions"},{"location":"troubleshooting/#updating-the-path-used-by-lsp-servers","text":"Sublime Text might see a different PATH from what your shell environment uses and might not be able to find the server binary due to that. You can see what ST thinks your PATH is by opening the ST console by clicking on View > Show Console , and running import os; os.environ[\"PATH\"] in that console. The solution is to make ST use the same PATH that is read by your shell (or OS in general in the case of Windows). Adjusting PATH can differ based on the operating system and the default shell used. Refer to the following table on where this should be adjusted: Windows Open Start Menu, type \"environment\" and select \"Edit environment variables for your account\". Modify the \"Path\" variable so that it includes the directory path to the program of your choice. macOS Depending on your default shell, edit: ~/.profile (bash), ~/.zprofile (zsh) or ~/.config/fish/config.fish (fish). Linux Edit ~/.profile . For macOS and Linux you can extend the path like so: export PATH = \"/usr/local/bin: $PATH \" For package managers like nvm (Node version manager), the recommended way is to insert its initialization script in the respective location specified above. Note On macOS, it's enough to restart ST for the changes to be picked up. On other platforms, you might have to re-login your user account. Another solution could be (at least on Linux) to update the server PATH using the env parameter in your LSP configuration file. The following template can be used where: <your_language_server_name> is the server name <added_path> is the directory needed for the server to behave correctly \"<your_language_server_name>\" : { // ... \"env\" : { \"PATH\" : \"<added_path>:/usr/local/bin\" } }","title":"Updating the PATH used by LSP servers"},{"location":"troubleshooting/#common-problems","text":"","title":"Common problems"},{"location":"troubleshooting/#1-lsp-doesnt-start-my-language-server","text":"When language server is started, its name appears on the left side of the status bar. If you expect your server to start for a particular file but it doesn't then: Make sure that the root scope (eg. source.php ) of the file matches the scope handled by the language server. You can check the root scope of the file by running Show Scope Name from the Tools -> Developer menu. Refer to the documentation of the language server or its own settings to know the expected scope. Make sure that the language server is not disabled globally either in its own settings or in Preferences: LSP Settings , or in the project settings ( Project: Edit Project from the Command Palette).","title":"1. LSP doesn't start my language server"},{"location":"troubleshooting/#2-lsp-cannot-find-my-language-server-no-such-file-or-directory-xyz","text":"If you are getting an error that the server binary can't be found but it does start when running it from the terminal, then the issue is likely due to Sublime Text's internal environment not picking up the same PATH environment variable as you've configured in your shell. See \"Updating the PATH used by LSP servers\" on how to make Sublime Text aware of the location of your langugage server.","title":"2. LSP cannot find my language server (No such file or directory: 'xyz')"},{"location":"troubleshooting/#3-popup-error-language-server-your_server_language_name-has-crashed","text":"The reason for this can be the same as in problem number 2. Additionally, the language servers may have dependencies that should also be in your PATH in addition to the server binary itself. For instance if you have installed the haskell-language-server using ghcup-hs you should expose its specific installation folder ~/.ghcup/bin . If the build process uses stack then it should also be in your PATH . If that doesn't solve the issue, try running LSP: Troubleshoot server and providing its output when asking for help.","title":"3. Popup error Language server &lt;your_server_language_name&gt; has crashed"},{"location":"troubleshooting/#known-issues","text":"","title":"Known Issues"},{"location":"troubleshooting/#completions-not-shown-after-certain-keywords","text":"Sublime Text's built-in Completion Rules.tmPreferences for some languages suppresses completions after certain keywords. The solution is to put an edited version of the Completion Rules.tmPreferences in the Packages folder (you may need to clear the copy in the Cache folder afterwards). More details on workaround and a final fix for Lua","title":"Completions not shown after certain keywords"},{"location":"guides/client_configuration/","text":"Client Configuration # Custom client configuration # Note The external LSP-* helper packages already come with their setting file and a client configuration and you don't need to add anything to the global LSP settings. This section is only relevant if you want to add a new client configuration for a server that doesn't have a corresponding helper package. After you have installed a language server, the LSP settings need to be configured to enable communication between LSP and that server for suitable filetypes. LSP ships with configurations for a few language servers, but these need to be enabled before they will start. To globally enable a server, open the Command Palette and choose \"LSP: Enable Language Server Globally\". This will add \"enabled\": true to the corresponding language server setting under the \"clients\" key in your user-settings file for LSP. Your user-settings file is stored at Packages/User/LSP.sublime-settings and can be opened via \"Preferences > Package Settings > LSP > Settings\" from the menu or with the Preferences: LSP Settings command from the Command Palette. If your language server is missing or not configured correctly, you need to add/override further settings which are explained below. Below is an example of the LSP.sublime-settings file with configurations for the Phpactor server. { // General settings \"show_diagnostics_panel_on_save\" : 0 , // Language server configurations \"clients\" : { \"phpactor\" : { // enable this configuration \"enabled\" : true , // the startup command -- what you would type in a terminal \"command\" : [ \"PATH/TO/phpactor\" , \"language-server\" ], // the selector that selects which type of buffers this language server attaches to \"selector\" : \"source.php\" } } } Setting Description enabled enables a language server (default is disabled) command must be on PATH or specify a full path, add arguments (can be empty if starting manually, then TCP transport must be configured) env dict of environment variables to be injected into the language server's process (eg. PYTHONPATH) settings per-project settings (equivalent to VS Code's Workspace Settings) initializationOptions options to send to the server at startup (rarely used) selector This is the connection between your files and language servers. It's a selector that is matched against the current view's base scope. If the selector matches with the base scope of the the file, the associated language server is started. For more information, see https://www.sublimetext.com/docs/3/selectors.html priority_selector Used to prioritize a certain language server when choosing which one to query on views with multiple servers active. Certain LSP actions have to pick which server to query and this setting can be used to decide which one to pick based on the current scopes at the cursor location. For example when having both HTML and PHP servers running on a PHP file, this can be used to give priority to the HTML one in HTML blocks and to PHP one otherwise. That would be done by setting \"feature_selector\" to text.html for HTML server and source.php to PHP server. Note: when the \"feature_selector\" is missing, it will be the same as the \"document_selector\". tcp_port see instructions below experimental_capabilities Turn on experimental capabilities of a language server. This is a dictionary and differs per language server disabled_capabilities Disables specific capabilities of a language server. This is a dictionary with key being a capability key and being true . Refer to the ServerCapabilities structure in LSP capabilities to find capabilities that you might want to disable. Note that the value should be true rather than false for capabilites that you want to disable. For example: \"signatureHelpProvider\": true You can figure out the scope of the current view with Tools > Developer > Show Scope . Subprocesses # A subprocess is always started. There is no support for connecting to a remote language server. Transports # Communication with a language server subprocess can be achieved in different ways. See the table below for what's possible. Standard input/output (STDIO) # The vast majority of language servers can communicate over stdio. To use stdio, leave out tcp_port and use only command in the client configuration. TCP - localhost - subprocess acts as a TCP server # Some language servers can also act as a TCP server accepting incoming TCP connections. So: the language server subprocess is started by this package, and the subprocess will then open a TCP listener port. The editor can then connect as a client and initiate the communication. To use this mode, set tcp_port to a positive number designating the port to connect to on localhost . TCP - localhost - editor acts as a TCP server # Some LSP servers instead expect the LSP client to act as a TCP server . The LSP server will then connect as a TCP client , after which the LSP client is expected to initiate the communication. To use this mode, set tcp_port to a negative number designating the port to bind to for accepting new TCP connections. To use a fixed port number, use -X as the value for tcp_port , where X is the desired (positive) port number. To select a random free port, use -1 as the value for tcp_port . The port number can be inserted into the server's startup command in your client configuration by using the ${port} template variable. It will expand to the absolute value of the bound port. Per-project overrides # Global LSP settings (which currently are lsp_format_on_save and lsp_code_actions_on_save ) can be overridden per-project in .sublime-project file: { \"folders\" : [ { \"path\" : \".\" } ], \"settings\" : { \"lsp_format_on_save\" : true , } } Also global language server settings can be added or overridden per-project by adding an LSP object within the settings object. A new server configurations can be added there or existing global configurations can be overridden (either fully or partially). Those can override server configurations defined within the clients key in LSP.sublime-settings or those provided by external helper packages. Note : The settings and initializationOptions objects for server configurations will be merged with globally defined server configurations so it's possible to override only certain properties from those objects. { \"folders\" : [ { \"path\" : \".\" } ], \"settings\" : { \"LSP\" : { \"jsts\" : { \"enabled\" : false , }, \"LSP-eslint\" : { \"settings\" : { \"eslint.autoFixOnSave\" : true // This proper t y will be merged wi t h origi nal se tt i n gs f or // t his clie nt (po tent ially overridi n g origi nal value). } } } } }","title":"Client Configuration"},{"location":"guides/client_configuration/#client-configuration","text":"","title":"Client Configuration"},{"location":"guides/client_configuration/#custom-client-configuration","text":"Note The external LSP-* helper packages already come with their setting file and a client configuration and you don't need to add anything to the global LSP settings. This section is only relevant if you want to add a new client configuration for a server that doesn't have a corresponding helper package. After you have installed a language server, the LSP settings need to be configured to enable communication between LSP and that server for suitable filetypes. LSP ships with configurations for a few language servers, but these need to be enabled before they will start. To globally enable a server, open the Command Palette and choose \"LSP: Enable Language Server Globally\". This will add \"enabled\": true to the corresponding language server setting under the \"clients\" key in your user-settings file for LSP. Your user-settings file is stored at Packages/User/LSP.sublime-settings and can be opened via \"Preferences > Package Settings > LSP > Settings\" from the menu or with the Preferences: LSP Settings command from the Command Palette. If your language server is missing or not configured correctly, you need to add/override further settings which are explained below. Below is an example of the LSP.sublime-settings file with configurations for the Phpactor server. { // General settings \"show_diagnostics_panel_on_save\" : 0 , // Language server configurations \"clients\" : { \"phpactor\" : { // enable this configuration \"enabled\" : true , // the startup command -- what you would type in a terminal \"command\" : [ \"PATH/TO/phpactor\" , \"language-server\" ], // the selector that selects which type of buffers this language server attaches to \"selector\" : \"source.php\" } } } Setting Description enabled enables a language server (default is disabled) command must be on PATH or specify a full path, add arguments (can be empty if starting manually, then TCP transport must be configured) env dict of environment variables to be injected into the language server's process (eg. PYTHONPATH) settings per-project settings (equivalent to VS Code's Workspace Settings) initializationOptions options to send to the server at startup (rarely used) selector This is the connection between your files and language servers. It's a selector that is matched against the current view's base scope. If the selector matches with the base scope of the the file, the associated language server is started. For more information, see https://www.sublimetext.com/docs/3/selectors.html priority_selector Used to prioritize a certain language server when choosing which one to query on views with multiple servers active. Certain LSP actions have to pick which server to query and this setting can be used to decide which one to pick based on the current scopes at the cursor location. For example when having both HTML and PHP servers running on a PHP file, this can be used to give priority to the HTML one in HTML blocks and to PHP one otherwise. That would be done by setting \"feature_selector\" to text.html for HTML server and source.php to PHP server. Note: when the \"feature_selector\" is missing, it will be the same as the \"document_selector\". tcp_port see instructions below experimental_capabilities Turn on experimental capabilities of a language server. This is a dictionary and differs per language server disabled_capabilities Disables specific capabilities of a language server. This is a dictionary with key being a capability key and being true . Refer to the ServerCapabilities structure in LSP capabilities to find capabilities that you might want to disable. Note that the value should be true rather than false for capabilites that you want to disable. For example: \"signatureHelpProvider\": true You can figure out the scope of the current view with Tools > Developer > Show Scope .","title":"Custom client configuration"},{"location":"guides/client_configuration/#subprocesses","text":"A subprocess is always started. There is no support for connecting to a remote language server.","title":"Subprocesses"},{"location":"guides/client_configuration/#transports","text":"Communication with a language server subprocess can be achieved in different ways. See the table below for what's possible.","title":"Transports"},{"location":"guides/client_configuration/#standard-inputoutput-stdio","text":"The vast majority of language servers can communicate over stdio. To use stdio, leave out tcp_port and use only command in the client configuration.","title":"Standard input/output (STDIO)"},{"location":"guides/client_configuration/#tcp-localhost-subprocess-acts-as-a-tcp-server","text":"Some language servers can also act as a TCP server accepting incoming TCP connections. So: the language server subprocess is started by this package, and the subprocess will then open a TCP listener port. The editor can then connect as a client and initiate the communication. To use this mode, set tcp_port to a positive number designating the port to connect to on localhost .","title":"TCP - localhost - subprocess acts as a TCP server"},{"location":"guides/client_configuration/#tcp-localhost-editor-acts-as-a-tcp-server","text":"Some LSP servers instead expect the LSP client to act as a TCP server . The LSP server will then connect as a TCP client , after which the LSP client is expected to initiate the communication. To use this mode, set tcp_port to a negative number designating the port to bind to for accepting new TCP connections. To use a fixed port number, use -X as the value for tcp_port , where X is the desired (positive) port number. To select a random free port, use -1 as the value for tcp_port . The port number can be inserted into the server's startup command in your client configuration by using the ${port} template variable. It will expand to the absolute value of the bound port.","title":"TCP - localhost - editor acts as a TCP server"},{"location":"guides/client_configuration/#per-project-overrides","text":"Global LSP settings (which currently are lsp_format_on_save and lsp_code_actions_on_save ) can be overridden per-project in .sublime-project file: { \"folders\" : [ { \"path\" : \".\" } ], \"settings\" : { \"lsp_format_on_save\" : true , } } Also global language server settings can be added or overridden per-project by adding an LSP object within the settings object. A new server configurations can be added there or existing global configurations can be overridden (either fully or partially). Those can override server configurations defined within the clients key in LSP.sublime-settings or those provided by external helper packages. Note : The settings and initializationOptions objects for server configurations will be merged with globally defined server configurations so it's possible to override only certain properties from those objects. { \"folders\" : [ { \"path\" : \".\" } ], \"settings\" : { \"LSP\" : { \"jsts\" : { \"enabled\" : false , }, \"LSP-eslint\" : { \"settings\" : { \"eslint.autoFixOnSave\" : true // This proper t y will be merged wi t h origi nal se tt i n gs f or // t his clie nt (po tent ially overridi n g origi nal value). } } } } }","title":"Per-project overrides"},{"location":"guides/cplusplus/","text":"Setup C/C++ # The below was written for clangd, but much applies to cquery and ccls as well. CCLS # Build and install from source or download for your distribution. See the ccls wiki for more details. Clangd # To use clangd on Debian/Ubuntu, add the apt repositories described here . After that, install with e.g. apt install clang-tools-9 . The clangd executable will have a version number suffix. For instance, clangd-9. You will thus have to adjust your \"clients\" dictionary in your user preferences. To use clangd on Mac, use Homebrew: brew install llvm . The clangd executable will be present in /usr/local/Cellar/llvm/ version /bin You probably need to install the Xcode developer command-line tools. Run the following in a terminal: xcode-select --install And if you're on macOS 10.14, also run the following to install essential headers like wchar_t.h : open /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg To use clangd on Windows, install LLVM with the LLVM installer , and then add C:\\Program Files\\LLVM\\bin to your %PATH%. Compilation database # For any project of non-trivial size, you probably have a build system in place to compile your source files. The compilation command passed to your compiler might include things like: Include directories, Define directives, Compiler-specific flags. compile_commands.json # Like any language server, clangd works on a per-file (or per-buffer) basis. But unlike most other language servers, it must also be aware of the exact compile flags that you pass to your compiler. For this reason, people have come up with the idea of a compilation database . At this time, this is just a simple JSON file that describes for each translation unit (i.e. a .cpp , .c , .m or .mm file) the exact compilation flags that you pass to your compiler. It's pretty much standardized that this file should be called compile_commands.json . clangd searches for this file up in parent directories from the currently active document . If you don't have such a file present, most likely clangd will spit out nonsense errors and diagnostics about your code. As it turns out, CMake can generate this file for you if you pass it the cache variable -DCMAKE_EXPORT_COMPILE_COMMANDS=ON when invoking CMake. It will be present in your build directory, and you can copy that file to the root of your project. Make sure to ignore this file in your version control system. If you are using a make-based build system, you could use compiledb to generate a compile_commands.json . Since header files are (usually) not passed to a compiler, they don't have compile commands. So even with a compilation database in place, clangd will still spit out nonsense in header files. You can try to remedy this by enhancing your compilation database with your header files using this project called compdb . To generate headers with compdb, read this closed issue . You can also read about attempts to address this on the CMake issue tracker , along with the problem of treating header files as translation units. compile_flags.txt # Another way to let your language server know what the include dirs are is by hand-writing a compile_flags.txt file in your source root. Each line is one flag. This can be useful for projects that e.g. only have a Visual Studio solution file. For more information, see these instructions . Creating this file by hand is a reasonable place to start if your project is quite simple.","title":"Setup C/C++"},{"location":"guides/cplusplus/#setup-cc","text":"The below was written for clangd, but much applies to cquery and ccls as well.","title":"Setup C/C++"},{"location":"guides/cplusplus/#ccls","text":"Build and install from source or download for your distribution. See the ccls wiki for more details.","title":"CCLS"},{"location":"guides/cplusplus/#clangd","text":"To use clangd on Debian/Ubuntu, add the apt repositories described here . After that, install with e.g. apt install clang-tools-9 . The clangd executable will have a version number suffix. For instance, clangd-9. You will thus have to adjust your \"clients\" dictionary in your user preferences. To use clangd on Mac, use Homebrew: brew install llvm . The clangd executable will be present in /usr/local/Cellar/llvm/ version /bin You probably need to install the Xcode developer command-line tools. Run the following in a terminal: xcode-select --install And if you're on macOS 10.14, also run the following to install essential headers like wchar_t.h : open /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg To use clangd on Windows, install LLVM with the LLVM installer , and then add C:\\Program Files\\LLVM\\bin to your %PATH%.","title":"Clangd"},{"location":"guides/cplusplus/#compilation-database","text":"For any project of non-trivial size, you probably have a build system in place to compile your source files. The compilation command passed to your compiler might include things like: Include directories, Define directives, Compiler-specific flags.","title":"Compilation database"},{"location":"guides/cplusplus/#compile_commandsjson","text":"Like any language server, clangd works on a per-file (or per-buffer) basis. But unlike most other language servers, it must also be aware of the exact compile flags that you pass to your compiler. For this reason, people have come up with the idea of a compilation database . At this time, this is just a simple JSON file that describes for each translation unit (i.e. a .cpp , .c , .m or .mm file) the exact compilation flags that you pass to your compiler. It's pretty much standardized that this file should be called compile_commands.json . clangd searches for this file up in parent directories from the currently active document . If you don't have such a file present, most likely clangd will spit out nonsense errors and diagnostics about your code. As it turns out, CMake can generate this file for you if you pass it the cache variable -DCMAKE_EXPORT_COMPILE_COMMANDS=ON when invoking CMake. It will be present in your build directory, and you can copy that file to the root of your project. Make sure to ignore this file in your version control system. If you are using a make-based build system, you could use compiledb to generate a compile_commands.json . Since header files are (usually) not passed to a compiler, they don't have compile commands. So even with a compilation database in place, clangd will still spit out nonsense in header files. You can try to remedy this by enhancing your compilation database with your header files using this project called compdb . To generate headers with compdb, read this closed issue . You can also read about attempts to address this on the CMake issue tracker , along with the problem of treating header files as translation units.","title":"compile_commands.json"},{"location":"guides/cplusplus/#compile_flagstxt","text":"Another way to let your language server know what the include dirs are is by hand-writing a compile_flags.txt file in your source root. Each line is one flag. This can be useful for projects that e.g. only have a Visual Studio solution file. For more information, see these instructions . Creating this file by hand is a reasonable place to start if your project is quite simple.","title":"compile_flags.txt"}]}